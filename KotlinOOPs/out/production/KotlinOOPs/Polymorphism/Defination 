
In the context of Object-Oriented Programming (OOP), polymorphism is a fundamental
concept that allows objects of different classes to be treated as objects of a common
 superclass or interface. It enables a single interface or method to work
 with different data types or objects,
 providing a more flexible and extensible design.

**********Compile-time ********
 Compile-time (or Static) Polymorphism:
 Also known as method overloading or static binding.
 Occurs when the decision about which method to call is
  made during the compile-time phase of the program.
 In method overloading, multiple methods with the same name but different parameter
  types are defined in the same class. The appropriate method is chosen based on
  the number or type of arguments passed to it.

 Example in Java:


 public class Calculator {
     public int add(int a, int b) {
         return a + b;
     }

     public double add(double a, double b) {
         return a + b;
     }
 }


 **********Run Time *******

 Runtime (or Dynamic) Polymorphism:
 Also known as method overriding or dynamic binding.
 Occurs when the decision about which method to call is
  made during runtime, based on the actual type of the object.

 In method overriding, a subclass provides a specific implementation for a method
 that is already defined in its superclass.
 The method in the subclass "overrides" the method in the superclass.

 Example:

 class Animal {
     void makeSound() {
         System.out.println("Generic animal sound");
     }
 }

 class Cat extends Animal {
     @Override
     void makeSound() {
         System.out.println("Meow");
     }
 }

 class Dog extends Animal {
     @Override
     void makeSound() {
         System.out.println("Woof");
     }
 }


*****Differences between the polymorphism and the inheritance ****
In summary, inheritance is about the relationship between classes, where one
 class inherits from another, while runtime polymorphism is about how methods
 with the same name can have different behaviors depending on the actual object
 type. Polymorphism can be achieved through inheritance, but it can also be achieved
  through interfaces and method overriding, not just limited to inheritance.